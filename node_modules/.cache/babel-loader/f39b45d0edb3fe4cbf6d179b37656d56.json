{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __extends } from \"tslib\";\nimport './polyfills';\nimport { scrollbarMap, Scrollbar } from './scrollbar';\nimport { addPlugins, ScrollbarPlugin } from './plugin';\nimport { attachStyle, detachStyle } from './style';\nexport { ScrollbarPlugin };\n/**\n * cast `I.Scrollbar` to `Scrollbar` to avoid error\n *\n * `I.Scrollbar` is not assignable to `Scrollbar`:\n *     \"privateProp\" is missing in `I.Scrollbar`\n *\n * @see https://github.com/Microsoft/TypeScript/issues/2672\n */\n\nvar SmoothScrollbar =\n/** @class */\nfunction (_super) {\n  __extends(SmoothScrollbar, _super);\n\n  function SmoothScrollbar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes a scrollbar on the given element.\n   *\n   * @param elem The DOM element that you want to initialize scrollbar to\n   * @param [options] Initial options\n   */\n\n\n  SmoothScrollbar.init = function (elem, options) {\n    if (!elem || elem.nodeType !== 1) {\n      throw new TypeError(\"expect element to be DOM Element, but got \" + elem);\n    } // attach stylesheet\n\n\n    attachStyle();\n\n    if (scrollbarMap.has(elem)) {\n      return scrollbarMap.get(elem);\n    }\n\n    return new Scrollbar(elem, options);\n  };\n  /**\n   * Automatically init scrollbar on all elements base on the selector `[data-scrollbar]`\n   *\n   * @param options Initial options\n   */\n\n\n  SmoothScrollbar.initAll = function (options) {\n    return Array.from(document.querySelectorAll('[data-scrollbar]'), function (elem) {\n      return SmoothScrollbar.init(elem, options);\n    });\n  };\n  /**\n   * Check if there is a scrollbar on given element\n   *\n   * @param elem The DOM element that you want to check\n   */\n\n\n  SmoothScrollbar.has = function (elem) {\n    return scrollbarMap.has(elem);\n  };\n  /**\n   * Gets scrollbar on the given element.\n   * If no scrollbar instance exsits, returns `undefined`\n   *\n   * @param elem The DOM element that you want to check.\n   */\n\n\n  SmoothScrollbar.get = function (elem) {\n    return scrollbarMap.get(elem);\n  };\n  /**\n   * Returns an array that contains all scrollbar instances\n   */\n\n\n  SmoothScrollbar.getAll = function () {\n    return Array.from(scrollbarMap.values());\n  };\n  /**\n   * Removes scrollbar on the given element\n   */\n\n\n  SmoothScrollbar.destroy = function (elem) {\n    var scrollbar = scrollbarMap.get(elem);\n\n    if (scrollbar) {\n      scrollbar.destroy();\n    }\n  };\n  /**\n   * Removes all scrollbar instances from current document\n   */\n\n\n  SmoothScrollbar.destroyAll = function () {\n    scrollbarMap.forEach(function (scrollbar) {\n      scrollbar.destroy();\n    });\n  };\n  /**\n   * Attaches plugins to scrollbars\n   *\n   * @param ...Plugins Scrollbar plugin classes\n   */\n\n\n  SmoothScrollbar.use = function () {\n    var Plugins = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      Plugins[_i] = arguments[_i];\n    }\n\n    return addPlugins.apply(void 0, Plugins);\n  };\n  /**\n   * Attaches default style sheets to current document.\n   * You don't need to call this method manually unless\n   * you removed the default styles via `Scrollbar.detachStyle()`\n   */\n\n\n  SmoothScrollbar.attachStyle = function () {\n    return attachStyle();\n  };\n  /**\n   * Removes default styles from current document.\n   * Use this method when you want to use your own css for scrollbars.\n   */\n\n\n  SmoothScrollbar.detachStyle = function () {\n    return detachStyle();\n  };\n\n  SmoothScrollbar.version = \"8.7.4\";\n  SmoothScrollbar.ScrollbarPlugin = ScrollbarPlugin;\n  return SmoothScrollbar;\n}(Scrollbar);\n\nexport default SmoothScrollbar;","map":{"version":3,"mappings":";;;;;;;;;AAAA,OAAO,aAAP;AAGA,SACEA,YADF,EAEEC,SAFF,QAGO,aAHP;AAKA,SACEC,UADF,EAEEC,eAFF,QAGO,UAHP;AAKA,SACEC,WADF,EAEEC,WAFF,QAGO,SAHP;AAKA,SAASF,eAAT;AAIA;;;;;;;;;AASA;AAAA;AAAA;AAA6CG;;AAA7C;;AA4GC;AAvGC;;;;;;;;AAMOC,yBAAP,UAAYC,IAAZ,EAA+BC,OAA/B,EAAoE;AAClE,QAAI,CAACD,IAAD,IAASA,IAAI,CAACE,QAAL,KAAkB,CAA/B,EAAkC;AAChC,YAAM,IAAIC,SAAJ,CAAc,+CAA6CH,IAA3D,CAAN;AACD,KAHiE,CAKlE;;;AACAJ,eAAW;;AAEX,QAAIJ,YAAY,CAACY,GAAb,CAAiBJ,IAAjB,CAAJ,EAA4B;AAC1B,aAAOR,YAAY,CAACa,GAAb,CAAiBL,IAAjB,CAAP;AACD;;AAED,WAAO,IAAIP,SAAJ,CAAcO,IAAd,EAAoBC,OAApB,CAAP;AACD,GAbM;AAeP;;;;;;;AAKOF,4BAAP,UAAeE,OAAf,EAAoD;AAClD,WAAOK,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,CAAX,EAA0D,UAACT,IAAD,EAAkB;AACjF,aAAOD,eAAe,CAACW,IAAhB,CAAqBV,IAArB,EAA2BC,OAA3B,CAAP;AACD,KAFM,CAAP;AAGD,GAJM;AAMP;;;;;;;AAKOF,wBAAP,UAAWC,IAAX,EAA4B;AAC1B,WAAOR,YAAY,CAACY,GAAb,CAAiBJ,IAAjB,CAAP;AACD,GAFM;AAIP;;;;;;;;AAMOD,wBAAP,UAAWC,IAAX,EAA4B;AAC1B,WAAOR,YAAY,CAACa,GAAb,CAAiBL,IAAjB,CAAP;AACD,GAFM;AAIP;;;;;AAGOD,2BAAP;AACE,WAAOO,KAAK,CAACC,IAAN,CAAWf,YAAY,CAACmB,MAAb,EAAX,CAAP;AACD,GAFM;AAIP;;;;;AAGOZ,4BAAP,UAAeC,IAAf,EAAgC;AAC9B,QAAMY,SAAS,GAAGpB,YAAY,CAACa,GAAb,CAAiBL,IAAjB,CAAlB;;AAEA,QAAIY,SAAJ,EAAe;AACbA,eAAS,CAACC,OAAV;AACD;AACF,GANM;AAQP;;;;;AAGOd,+BAAP;AACEP,gBAAY,CAACsB,OAAb,CAAqB,UAACF,SAAD,EAAU;AAC7BA,eAAS,CAACC,OAAV;AACD,KAFD;AAGD,GAJM;AAMP;;;;;;;AAKOd,wBAAP;AAAW;;SAAA,yCAAsC;AAAtCgB;;;AACT,WAAOrB,UAAU,MAAV,CAAU,MAAV,EAAcqB,OAAd,CAAP;AACD,GAFM;AAIP;;;;;;;AAKOhB,gCAAP;AACE,WAAOH,WAAW,EAAlB;AACD,GAFM;AAIP;;;;;;AAIOG,gCAAP;AACE,WAAOF,WAAW,EAAlB;AACD,GAFM;;AAxGAE,4BAAU,OAAV;AAEAA,oCAAkBJ,eAAlB;AAyGT;AAAC,CA5GD,CAA6CF,SAA7C;;eAAqBM","names":["scrollbarMap","Scrollbar","addPlugins","ScrollbarPlugin","attachStyle","detachStyle","__extends","SmoothScrollbar","elem","options","nodeType","TypeError","has","get","Array","from","document","querySelectorAll","init","values","scrollbar","destroy","forEach","Plugins"],"sourceRoot":"","sources":["src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}