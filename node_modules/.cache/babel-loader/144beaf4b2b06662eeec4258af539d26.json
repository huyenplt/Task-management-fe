{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport AuthService from \"../services/auth.service\";\nvar user = JSON.parse(localStorage.getItem(\"user\"));\nvar initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user: user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport var auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login: function login(_ref, user) {\n      var commit = _ref.commit;\n      return AuthService.login(user).then(function (user) {\n        commit(\"loginSuccess\", user);\n        return Promise.resolve(user);\n      }, function (error) {\n        commit(\"loginFailure\");\n        return Promise.reject(error);\n      });\n    },\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      AuthService.logout();\n      commit(\"logout\");\n    },\n    register: function register(_ref3, user) {\n      var commit = _ref3.commit;\n      return AuthService.register(user).then(function (response) {\n        commit(\"registerSuccess\");\n        return Promise.resolve(response.data);\n      }, function (error) {\n        commit(\"registerFailure\");\n        return Promise.reject(error);\n      });\n    }\n  },\n  mutations: {\n    loginSuccess: function loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure: function loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout: function logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    registerSuccess: function registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    registerFailure: function registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/macbookpro/Documents/projects/task-management-fe/src/store/auth.module.js"],"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","Promise","resolve","error","reject","logout","register","response","data","mutations","loginSuccess","loginFailure","registerSuccess","registerFailure"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACA,IAAMC,YAAY,GAAGL,IAAI,GACrB;AAAEM,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA8BP,EAAAA,IAAI,EAAJA;AAA9B,CADqB,GAErB;AAAEM,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA+BP,EAAAA,IAAI,EAAE;AAArC,CAFJ;AAGA,OAAO,IAAMQ,IAAI,GAAG;AAClBC,EAAAA,UAAU,EAAE,IADM;AAElBC,EAAAA,KAAK,EAAEL,YAFW;AAGlBM,EAAAA,OAAO,EAAE;AACPC,IAAAA,KADO,uBACWZ,IADX,EACiB;AAAA,UAAhBa,MAAgB,QAAhBA,MAAgB;AACtB,aAAOd,WAAW,CAACa,KAAZ,CAAkBZ,IAAlB,EAAwBc,IAAxB,CACL,UAACd,IAAD,EAAU;AACRa,QAAAA,MAAM,CAAC,cAAD,EAAiBb,IAAjB,CAAN;AACA,eAAOe,OAAO,CAACC,OAAR,CAAgBhB,IAAhB,CAAP;AACD,OAJI,EAKL,UAACiB,KAAD,EAAW;AACTJ,QAAAA,MAAM,CAAC,cAAD,CAAN;AACA,eAAOE,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACD,OARI,CAAP;AAUD,KAZM;AAaPE,IAAAA,MAbO,yBAaY;AAAA,UAAVN,MAAU,SAAVA,MAAU;AACjBd,MAAAA,WAAW,CAACoB,MAAZ;AACAN,MAAAA,MAAM,CAAC,QAAD,CAAN;AACD,KAhBM;AAiBPO,IAAAA,QAjBO,2BAiBcpB,IAjBd,EAiBoB;AAAA,UAAhBa,MAAgB,SAAhBA,MAAgB;AACzB,aAAOd,WAAW,CAACqB,QAAZ,CAAqBpB,IAArB,EAA2Bc,IAA3B,CACL,UAACO,QAAD,EAAc;AACZR,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOE,OAAO,CAACC,OAAR,CAAgBK,QAAQ,CAACC,IAAzB,CAAP;AACD,OAJI,EAKL,UAACL,KAAD,EAAW;AACTJ,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOE,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACD,OARI,CAAP;AAUD;AA5BM,GAHS;AAiClBM,EAAAA,SAAS,EAAE;AACTC,IAAAA,YADS,wBACId,KADJ,EACWV,IADX,EACiB;AACxBU,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,IAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAaA,IAAb;AACD,KAJQ;AAKTyB,IAAAA,YALS,wBAKIf,KALJ,EAKW;AAClBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACD,KARQ;AASTmB,IAAAA,MATS,kBASFT,KATE,EASK;AACZA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACD,KAZQ;AAaT0B,IAAAA,eAbS,2BAaOhB,KAbP,EAac;AACrBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACD,KAfQ;AAgBToB,IAAAA,eAhBS,2BAgBOjB,KAhBP,EAgBc;AACrBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACD;AAlBQ;AAjCO,CAAb","sourcesContent":["import AuthService from \"../services/auth.service\";\nconst user = JSON.parse(localStorage.getItem(\"user\"));\nconst initialState = user\n  ? { status: { loggedIn: true }, user }\n  : { status: { loggedIn: false }, user: null };\nexport const auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login({ commit }, user) {\n      return AuthService.login(user).then(\n        (user) => {\n          commit(\"loginSuccess\", user);\n          return Promise.resolve(user);\n        },\n        (error) => {\n          commit(\"loginFailure\");\n          return Promise.reject(error);\n        }\n      );\n    },\n    logout({ commit }) {\n      AuthService.logout();\n      commit(\"logout\");\n    },\n    register({ commit }, user) {\n      return AuthService.register(user).then(\n        (response) => {\n          commit(\"registerSuccess\");\n          return Promise.resolve(response.data);\n        },\n        (error) => {\n          commit(\"registerFailure\");\n          return Promise.reject(error);\n        }\n      );\n    },\n  },\n  mutations: {\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    registerFailure(state) {\n      state.status.loggedIn = false;\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}